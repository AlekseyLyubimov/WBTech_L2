package pattern

/*
Команда — это поведенческий паттерн, позволяющий заворачивать запросы или простые операции в отдельные объекты.

Это позволяет откладывать выполнение команд, выстраивать их в очереди, а также хранить историю и делать отмену.

Паттерн Команда предлагает больше не отправлять такие вызовы напрямую. 
Вместо этого каждый вызов, отличающийся от других, следует завернуть в собственный класс 
с единственным методом, который и будет осуществлять вызов. Такие объекты называют командами.

К объекту интерфейса можно будет привязать объект команды, который знает, 
кому и в каком виде следует отправлять запросы. Когда объект интерфейса будет готов передать запрос, 
он вызовет метод команды, а та — позаботится обо всём остальном.

Классы команд можно объединить под общим интерфейсом c единственным методом запуска. 
После этого одни и те же отправители смогут работать с различными командами, не привязываясь к их классам. 
Даже больше: команды можно будет взаимозаменять на лету, изменяя итоговое поведение отправителей.

Параметры, с которыми должен быть вызван метод объекта получателя, можно загодя 
сохранить в полях объекта-команды. Благодаря этому, объекты, отправляющие запросы, 
могут не беспокоиться о том, чтобы собрать необходимые для получателя данные. 
Более того, они теперь вообще не знают, кто будет получателем запроса. Вся эта информация скрыта внутри команды.
*/

type Command interface {
    execute()
}

type Switch struct {
    command Command
}

func (s *Switch) press() {
    s.command.execute()
}

type OnCommand struct {
    device Device
}

func (c *OnCommand) execute() {
    c.device.on()
}

type OffCommand struct {
    device Device
}

func (c *OffCommand) execute() {
    c.device.off()
}

type Device interface {
    on()
    off()
}

type Tv struct {
    isOn bool
}

func (t *Tv) on() {
    t.isOn = true
    println("Turning tv on")
}

func (t *Tv) off() {
    t.isOn = false
    println("Turning tv off")
}
