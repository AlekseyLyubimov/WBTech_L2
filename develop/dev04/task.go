package main

import (
	"fmt"
	"sort"
	"strings"
)

/*Написать функцию поиска всех множеств анаграмм по словарю.

Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Требования:
Входные данные для функции: ссылка на массив, каждый элемент которого - слово на русском языке в кодировке utf8
Выходные данные: ссылка на мапу множеств анаграмм
Ключ - первое встретившееся в словаре слово из множества. Значение - ссылка на массив, каждый элемент которого,
слово из множества.
Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.
*/

func main() {
	words := []string{"Тяпка", "пятак", "лИсток", "столик", "пятка", "слитОК"}
	for i, str := range words {
		words[i] = strings.ToLower(str)
	}

	m := map[string][]string{}

	/*
	Использовать в качестве ключа "первое встретившееся в словаре слово из множества" имо не нужно.
	Будет радикально менее читаемый и очень тормозной код.
	*/

	for _, str := range words {
		key := keyify(str)
		val, ok := m[key]
		if ok {
			m[key] = append(val, str)
		} else {
			m[key] = []string{str}
		}
	}

	fmt.Println(m)
}

func keyify(word string) string {
	key := strings.Split(word, "")
	sort.Strings(key)
	return strings.Join(key, "")
}
